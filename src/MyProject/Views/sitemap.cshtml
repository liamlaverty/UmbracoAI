@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Core.Models.PublishedContent
@using Umbraco.Extensions
@inject Umbraco.Cms.Core.Web.IUmbracoContextAccessor UmbracoContextAccessor
@{
    Layout = null;
    Context.Response.ContentType = "application/xml";
    
    // Function to get all pages recursively - simplified version
    IEnumerable<IPublishedContent> GetAllPages(IPublishedContent node)
    {
        var pages = new List<IPublishedContent>();
        
        // Exclude sitemap pages themselves
        if (node.ContentType.Alias == "sitemap")
        {
            return pages;
        }
        
        // Include all pages with templates for now (ignore includeInSitemap property)
        if (node.TemplateId > 0)
        {
            pages.Add(node);
        }
        
        // Add all child pages recursively
        foreach (var child in node.Children.Where(x => x.IsVisible()))
        {
            pages.AddRange(GetAllPages(child));
        }
        
        return pages;
    }
    
    // Get all pages - start from the actual content root
    var allPages = new List<IPublishedContent>();
    var debugInfo = new List<string>();
    
    // Get all root level content items from the Umbraco context
    if (UmbracoContextAccessor.TryGetUmbracoContext(out var umbracoContext))
    {
        var rootItems = umbracoContext.Content?.GetAtRoot();
        debugInfo.Add($"Root items count: {rootItems?.Count() ?? 0}");
        
        if (rootItems != null)
        {
            foreach (var item in rootItems)
            {
                debugInfo.Add($"Root item: {item.Name} (Type: {item.ContentType.Alias}, Visible: {item.IsVisible()})");
            }
        }
        
        var rootNodes = rootItems?
            .Where(x => x.IsVisible() && x.ContentType.Alias != "sitemap") ?? Enumerable.Empty<IPublishedContent>();
        
        debugInfo.Add($"Filtered root nodes count: {rootNodes.Count()}");
        
        foreach (var root in rootNodes)
        {
            debugInfo.Add($"Processing root: {root.Name}");
            var pages = GetAllPages(root).ToList();
            debugInfo.Add($"Pages found from {root.Name}: {pages.Count}");
            allPages.AddRange(pages);
        }
    }
    
    debugInfo.Add($"Total pages in sitemap: {allPages.Count}");
}<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
@foreach (var page in allPages)
{
    try
    {
        var pageUrl = page.Url(mode: UrlMode.Absolute);
        var lastMod = page.UpdateDate.ToString("yyyy-MM-dd");
        var changeFreq = "weekly";
        var priority = "0.5";
        
        // Try to get change frequency from property
        try
        {
            var freqProp = page.GetProperty("sitemapChangeFrequency");
            if (freqProp != null && freqProp.HasValue())
            {
                var rawValue = freqProp.GetValue();
                if (rawValue != null)
                {
                    var strValue = rawValue.ToString();
                    if (!string.IsNullOrWhiteSpace(strValue))
                    {
                        // The dropdown might return JSON array format like ["daily"]
                        // Try to clean it up
                        strValue = strValue.Trim('[', ']', '"', ' ');
                        if (!string.IsNullOrWhiteSpace(strValue))
                        {
                            changeFreq = strValue;
                        }
                    }
                }
            }
        }
        catch { /* Use default */ }
        
        // Try to get priority from property
        try
        {
            var priorityProp = page.GetProperty("sitemapPriority");
            if (priorityProp != null && priorityProp.HasValue())
            {
                var rawValue = priorityProp.GetValue();
                if (rawValue != null)
                {
                    var strValue = rawValue.ToString();
                    if (decimal.TryParse(strValue, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out var decValue))
                    {
                        priority = decValue.ToString("0.0", System.Globalization.CultureInfo.InvariantCulture);
                    }
                }
            }
        }
        catch { /* Use default */ }
        
        <url>
            <loc>@pageUrl</loc>
            <lastmod>@lastMod</lastmod>
            <changefreq>@changeFreq</changefreq>
            <priority>@priority</priority>
        </url>
    }
    catch (Exception ex)
    {
        debugInfo.Add($"Error on {page.Name}: {ex.Message}");
    }
}
</urlset>